{"version":3,"sources":["scripts/plugin.js"],"names":["type","document","contentType","toLowerCase","chrome","storage","local","get","enabled","config","render","markdown","highlighted","hljs","highlight","value","rendered","marked","parse","body","innerHTML","console","window","md","setAttribute","onChanged","addListener","changes","area","newValue","i","arguments","length","href","extension","getURL","link","createElement","head","appendChild","languages","listLanguages","forEach","lang","setOptions","data","highlightAuto","pre","getElementsByTagName","firstChild","nodeValue","location","startsWith","log","setInterval","request","XMLHttpRequest","open","send","onreadystatechange","readyState","text","responseText"],"mappings":"AAAA,IAAIA,MAAQC,SAASC,aAAe,WAAWC,cAEjC,eAATH,MAAoC,kBAATA,KAC9BI,OAAOC,QAAQC,MAAMC,KAAMC,SAAS,GAAQ,SAAUC,GAkEpD,SAASC,EAAQC,GAEf,IAAIC,EAAcC,EAAKC,UAAU,WAAYH,GAAU,GAAMI,MACzDC,EAAWC,EAAOC,MAAMP,GAc5B,OAHAV,SAASkB,KAAKC,UAAY,8CAAgDR,EAAc,wCAA0CI,EAAW,aAGtIL,EAjFT,IAAIH,EAAUC,EAAOD,QACjBa,EAAUC,OAAOD,QACjBJ,EAASK,OAAOL,OAChBJ,EAAOS,OAAOT,KACdU,EAAK,KAGTtB,SAASkB,KAAKK,aAAa,QAAShB,EAAU,UAAY,YAG1DJ,OAAOC,QAAQoB,UAAUC,YAAY,SAAUC,EAASC,GACtDpB,EAAUmB,EAAQnB,QAAQqB,SAC1B5B,SAASkB,KAAKK,aAAa,QAAShB,EAAU,UAAY,cAI3D,WACC,IAAK,IAAIsB,EAAI,EAAGA,EAAIC,UAAUC,OAAQF,IAAK,CACzC,IAAIG,EAAO7B,OAAO8B,UAAUC,OAAO,OAASJ,UAAUD,GAAK,QAC3D,GAAIG,EAAM,CACR,IAAIG,EAAOnC,SAASoC,cAAc,QAClCD,EAAKZ,aAAa,MAAO,cACzBY,EAAKZ,aAAa,OAAQS,GAC1BhC,SAASqC,KAAKC,YAAYH,MAG7B,WAAY,UAAW,SAAU,QAGpC,IAAII,KACJ3B,EAAK4B,gBAAgBC,QAAQ,SAAUC,GACrCH,EAAUG,EAAKxC,eAAiBwC,IAalC1B,EAAO2B,YAEL9B,UAAW,SAAU+B,EAAMF,GAazB,OAXAA,EAAOA,GAAQA,EAAKxC,eAIlB0C,EADEF,GAAQH,EAAUG,GACb9B,EAAKC,UAAU0B,EAAUG,GAAOE,GAAM,GAEtChC,EAAKiC,cAAcD,IAKhB9B,SA0BhB,IAAIgC,EAAM9C,SAASkB,KAAK6B,qBAAqB,OAAO,GAChDD,GAAOA,EAAIE,aAEb1B,EAAKb,EAAOqC,EAAIE,WAAWC,WAGvB5B,OAAO6B,SAASlB,KAAKmB,WAAW,YAClC/B,EAAQgC,IAAI,2BAA6B/B,OAAO6B,SAASlB,KAAO,oBAGhEX,OAAOgC,YAAY,WAEjB,IAAIC,EAAU,IAAIC,eAClBD,EAAQE,KAAK,MAAOnC,OAAO6B,SAASlB,MACpCsB,EAAQG,OAGRH,EAAQI,mBAAqB,WAC3B,GAA2B,IAAvBJ,EAAQK,WAAZ,CAGA,IAAIC,EAAON,EAAQO,aACfD,IAAStC,IAGbF,EAAQgC,IAAI,uBAAyB/B,OAAO6B,SAASlB,MACrDV,EAAKb,EAAOmD,OAEb,MAEHxC,EAAQgC,IAAI,+BAAiC/B,OAAO6B,SAASlB,KAAO,wBAK1EZ,QAAQgC,IAAI,4CAA8CrD","file":"plugin.js","sourcesContent":["var type = (document.contentType || 'unknown').toLowerCase()\n\nif ((type === 'text/plain') || (type === 'text/markdown')) {\n  chrome.storage.local.get({ enabled: true }, function (config) {\n    // Local variables\n    var enabled = config.enabled\n    var console = window.console\n    var marked = window.marked\n    var hljs = window.hljs\n    var md = null\n\n    // Setup base body class\n    document.body.setAttribute('class', enabled ? 'enabled' : 'disabled')\n\n    // Add a listener waiting for enabled/disabled events\n    chrome.storage.onChanged.addListener(function (changes, area) {\n      enabled = changes.enabled.newValue\n      document.body.setAttribute('class', enabled ? 'enabled' : 'disabled')\n    })\n\n    // Add our stylesheets\n    ;(function css () {\n      for (var i = 0; i < arguments.length; i++) {\n        var href = chrome.extension.getURL('css/' + arguments[i] + '.css')\n        if (href) {\n          var link = document.createElement('link')\n          link.setAttribute('rel', 'stylesheet')\n          link.setAttribute('href', href)\n          document.head.appendChild(link)\n        }\n      }\n    })('markdown', 'default', 'github', 'page')\n\n    // Get a list of valid languages\n    var languages = {}\n    hljs.listLanguages().forEach(function (lang) {\n      languages[lang.toLowerCase()] = lang\n    })\n\n    // var toc = []\n    // var renderer = new marked.Renderer()\n\n    // renderer.heading = function(text, level, raw) {\n    //   var anchor = this.options.headerPrefix + raw.toLowerCase().replace(/[^\\w]+/g, '-')\n    //   toc.push({ anchor: anchor, level: level, text: text })\n    //   return '<h'+ level+ ' id=\"'+ anchor+ '\">'+ text+ '</h'+ level+ '>\\n'\n    // }\n\n    // Set up marked with our highlight parser\n    marked.setOptions({\n      // renderer: renderer,\n      highlight: function (data, lang) {\n        // Language case normalization\n        lang = lang && lang.toLowerCase()\n\n        // Is this a known language or autodetect?\n        if (lang && languages[lang]) {\n          data = hljs.highlight(languages[lang], data, true)\n        } else {\n          data = hljs.highlightAuto(data)\n        }\n\n        // Wrap in a class with whatever language we found\n        // return '<code class=\"hljs ' + data.language + '\">' + data.value + '</code>'\n        return data.value\n      }\n    })\n\n    // Recreate the body given some markdown text\n    function render (markdown) {\n      // Highlight as markdown, and render markdown\n      var highlighted = hljs.highlight('markdown', markdown, true).value\n      var rendered = marked.parse(markdown)\n\n      // var tocHTML = '<ul>\\n'\n      // toc.forEach(function (entry) {\n      //   tocHTML += '<li><a href=\"#' + entry.anchor + '\">' + entry.text + '</a></li>\\n'\n      // })\n      // tocHTML += '</ul>\\n'\n\n      // rendered = rendered.replace(/\\[TOC\\]/g, tocHTML)\n\n      // Setup the document's body\n      document.body.innerHTML = '<pre class=\"hljs markdown markdown-source\">' + highlighted + '</pre><article class=\"markdown-body\">' + rendered + '</article>'\n\n      // Return the original markdown\n      return markdown\n    }\n\n    // Evaluate our root <pre>, containing the text\n    var pre = document.body.getElementsByTagName('pre')[0]\n    if (pre && pre.firstChild) {\n      // Remember the original text we loaded\n      md = render(pre.firstChild.nodeValue)\n\n      // Set a timer checking for file (only) changes\n      if (window.location.href.startsWith('file://')) {\n        console.log('Checking for changes on ' + window.location.href + ' every 3 seconds')\n\n        // Set running on interval...\n        window.setInterval(function () {\n          // Use an XMLHttpRequest\n          var request = new XMLHttpRequest()\n          request.open('GET', window.location.href)\n          request.send()\n\n          // Get notification when the state changes\n          request.onreadystatechange = function () {\n            if (request.readyState !== 4) return\n\n            // Check if the text was changed\n            var text = request.responseText\n            if (text === md) return\n\n            // Some changes here... Re-render and save the content\n            console.log('Changes detected on ' + window.location.href)\n            md = render(text)\n          }\n        }, 3000)\n      } else {\n        console.log('Not checking for changes on ' + window.location.href + ', reload manually')\n      }\n    }\n  })\n} else {\n  console.log('Not rendering markdown for content type: ' + type)\n}\n"]}